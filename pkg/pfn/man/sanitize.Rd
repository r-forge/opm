\name{sanitize}
\alias{sanitize}
\title{Create portable file or directory names}
\usage{
  sanitize(paths = getwd(), lower = FALSE,
    directories = TRUE, enforce = 0L)
}
\arguments{
  \item{paths}{Either character vector with names of files
  or directories, or data frame as generate by a previous
  call of this function.}

  \item{lower}{Logical vector of length 1 that indicates
  whether file and directory names should also be converted
  to lowercase characters. Has only an effect if
  \code{paths} is a character vector. If \code{TRUE}, this
  causes all file names to be assessed and runs of
  underscores, dots or hyphens in all file names be
  replaced by a single such character. If \code{FALSE},
  file names that contain only portable characters will be
  skipped.}

  \item{directories}{Logical vector of length 1 that
  indicates whether directory names should also be modified
  when not portable. Has only an effect if \code{paths} is
  a character vector. If \code{FALSE}, only files are
  checked and potentially renamed. Directories, if any, are
  nevertheless traversed recursively.}

  \item{enforce}{Numeric vector of length 1 that indicates
  under which circumstances renaming of files should be
  attempted. Has only an effect if \code{paths} is a data
  frame. Possible values are: \describe{ \item{-1}{Do not
  rename anything, only conduct the checks.}
  \item{0}{Rename files unless the target is duplicated in
  the \sQuote{To} column of the \code{paths} data frame or
  already exists in the file system.} \item{1}{Rename
  files; overwrite existing files, if any, but take care of
  duplicates in the \sQuote{To} column of the \code{paths}
  data frame. That is, do not rename files if the target
  occurs a second time.} \item{2}{Rename files; overwrite
  existing files and overwrite duplicates in the
  \sQuote{To} column of the \code{paths} data frame, if
  any. This may cause loss of data and should only be
  applied if the lost files are superfluous.} }}
}
\value{
  Data frame with three columns \sQuote{From}, \sQuote{To}
  and \sQuote{Problem}, which contain character vectors.
}
\description{
  Rename files or directories to generate portable names.
  Names of directories passed to this function cause them
  to be traversed recursively.
}
\details{
  When applied to a vector of path names this function does
  not actually rename anything but generates a data frame
  that indicates which files or directories should be
  renamed to what. This data frame can be inspected by the
  user prior to doing anything dangerous. Rows can be
  removed or set to a non-empty value in the
  \sQuote{Problem} column, which will cause them to be
  skipped when passed to the function again. Sorting the
  data frame in a different way is strongly discouraged,
  however.

  When applied to a data frame as generated by a previous
  call of this function, it will conduct the renaming of
  files and directories as proposed in this data frame,
  subject to the conditions controlled by the
  \code{enforce} argument. The returned data frame will
  indicate in the \sQuote{Problem} column whether renaming
  was attempted and, if so, whether it was successful.

  Here \sQuote{Portable Filename} is used as defined by the
  \emph{Open Group} (see \sQuote{References} section), i.e.
  only \acronym{ASCII} letters, numbers, period,
  hyphen-minus and underscore are permitted. To create
  portable but reasonably informative names, an attempt is
  made to replace non-Latin characters by their Latin
  counterparts and these by their \acronym{ASCII}
  counterparts. Some modifications from the
  \code{sanity.pl} script (see \sQuote{References} section)
  are also applied. All remaining special characters get
  removed by underscores. For further details see the code.
}
\note{
  Renaming files or directories may fail for various
  reasons. See the documentation of \code{file.rename} for
  details.
}
\examples{
## call 1: generate data frame but never rename
tasks <- sanitize()
head(tasks) # it may well be that nothing was found

## call 2: use data frame for renaming (if enforce >= 0)
result <- sanitize(paths = tasks, enforce = -1)
head(result) # additional problems may now be listed

\dontrun{

  ## immediately rename a single file
  sanitize(sanitize("mydir/file with spaces.txt"))

  ## immediately rename two entire directories
  sanitize(sanitize(c("ugly directory", "../bad folder")))
}
}
\author{
  Markus Goeker, with contributions by Heike Freese and
  Johannes Sikorski
}
\references{
  \url{http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html}

  \url{https://en.wikipedia.org/wiki/ASCII}

  \url{https://github.com/splitbrain/sanity/blob/master/sanity.pl}
}
\seealso{
  base::file.rename
}
\keyword{utilities}

