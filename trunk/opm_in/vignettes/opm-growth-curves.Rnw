

\documentclass[nojss]{jss}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% GENERAL HINTS: STYLE OF THIS DOCUMENT
%
% See the according section in the Rnw file for the main tutorial!!!
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% These commands do nothing. They are used for a logical annotation of text,
% causing the spellchecker to ignore its content.
%
\def\Surname{}
\def\German{}

% Acronyms
%
\usepackage{acronym}
\acrodef{CSV}{Comma-Separated Values}
\acrodef{DSMZ}{\German{Deutsche Sammlung von Mikroorganismen und Zellkulturen}}
\acrodef{PM}{Phenotype Microarray}

%% Add Revision Control System (RCS) Markups
\usepackage{ulem}      % use this for sout
\usepackage{hyperref}
\usepackage{caption}
\usepackage{subcaption}
\usepackage{enumitem}
%\usepackage{fancyvrb}
\normalem              % set \emph to \textit again
% Additions (in blue)
\def\rcsadd#1{{\color{blue}#1}}
% Deletions (in red)
\def\rcsdel#1{{\color{red}\sout{#1}}}
% Yellow box (few words)
\def\rcsmark#1{\colorbox{yellow}{#1}}
%Yellow box (paragraph)
\def\rcscom#1{\noindent\newline\vspace*{0.5cm}\colorbox{yellow}{\parbox{\textwidth}{#1}}\vspace*{0.5cm}}


%% overwrite JSS definition of subsubsections
%% e.g., use numbering
\renewcommand{\jsssubsubsec}[2][default]{\vskip \preSskip%
  \pdfbookmark[3]{#1}{Subsubsection.\thesubsubsection.#1}%
  \refstepcounter{subsubsection}%
  {\large \thesubsubsection. #2} \nopagebreak
  \vskip \postSskip \nopagebreak}

%% overwrite JSS definitions of code sections
%% (make font smaller)
\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontshape=sl, fontsize=\small}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{Scode}{Verbatim}{fontshape=sl, fontsize=\small}

\DefineVerbatimEnvironment{Code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{CodeInput}{Verbatim}{fontshape=sl, fontsize=\small}
\DefineVerbatimEnvironment{CodeOutput}{Verbatim}{fontsize=\small}



%% needed for CRAN checking
%\VignetteIndexEntry{Substrate information in opm}


% authors, first page
\author{Lea A.I. \Surname{Vaas}\\Leibniz Institute \acs{DSMZ} \And
        Markus \Surname{G\"{o}ker}\\Leibniz Institute \acs{DSMZ}}


% title, first page
\title{Analysing growth curves and other user-defined plates in \pkg{opm}}


% authors, header on every 2nd page
\Plainauthor{L.A.I. Vaas, M. G\"{o}ker}


% main title, first page
\Plaintitle{Analysing growth curves and other user-defined plates in opm}


% short title, header on every 2nd page
\Shorttitle{User-defined plates in \pkg{opm} (\today)}


\Abstract{
This is tutorial about the analysis of growth curves and other user defined kinetics with the \pkg{opm} package in the version of \today{}.
It is explained how any kinds of growth or respiration measurements can be input into \pkg{opm}.
We also show how \ac{PM} data with user-defined plate types can be analysed.
Analysing such data visually and statistically requires in some cases adaptations of function arguments whose defaults are targeting \ac{PM} data.
All these practically relevant issues are explained in detail.
}

\Keywords{Growth Kinetics}

\Plainkeywords{respiration kinetics, pathways, CAS, MeSH, ChEBI, MetaCyc, KEGG, pathview}

\Address{
  Markus \Surname{G\"{o}ker}\\
  Leibniz Institute \acs{DSMZ} -- German Collection of Microorganisms and Cell Cultures\\
  \German{Braunschweig}\\
  \\
  Telephone: +49/531-2616-272\\
  Fax: +49/531-2616-237\\
  E-mail: \email{markus.goeker@dsmz.de}\\
  URL: \url{www.dsmz.de}\\
}


%% this must be included if Sweave is used (with % symbols):
%% need no \usepackage{Sweave.sty}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{document}
% NOTE: Rstudio might insert a line '\SweaveOpts{concordance=TRUE}' after '\begin{document}', which is removed again by the build script, as it causes warning messages during R CMD check.
% So please don't try to rescue that line, and don't rely on it being there.


%% so far adding a TOC proved unsuccessful -- apparently the JSS style doesn't allow for a TOC
%\tableofcontents
%\newpage
\acresetall

\section{Introduction}\label{introduction}

\subsection[Preliminary notes]{Preliminary notes}
A detailed description of the OmniLog\textregistered \ \ac{PM} system, its measuring procedure and data characteristics are found in the vignette ``\pkg{opm}: An R Package for Analysing OmniLog\textregistered \ Phenotype Microarray Data'' (called ``main tutorial'' in the following).
How substrate information stored within \pkg{opm} can be accessed and used for advanced visual and statistical analyses is explained in the vignette ``Working with substrate information in \pkg{opm}'' (called ``substrate tutorial'' in the following).
The description of the methods below presupposes that the user is familiar with the usage of \pkg{opm} and has studied the main tutorial, the substrate tutorial as well as the entries of the \pkg{opm} manual relevant to her or his research.
Especially the concepts behind, and the methods available for, the different classes of \pkg{opm} objects should be known before starting with this tutorial.

\subsection[Growth curve analysis and user-defined PM plates]{Growth curve analysis and user-defined \ac{PM} plates}
In addition to visual inspection or statistical comparative analyses of \ac{PM} data, as described in the main tutorial and the substrate tutorial, users might be interested in analysing curve data other than \ac{PM} data, or analysing \ac{PM} measured on customised or user-defined plate types.

The analysis of data other than \ac{PM} data, such as growth curves, additionally requires inputting these data and converting them to \proglang{OPMX} objects.
Moreover, some defaults of the plotting functions are only suitable for \ac{PM} data.
Hence, the functions should be called slightly distinctly.

Besides these slight restrictions, which are illustrated with examples below, non-\ac{PM} data can be analysed with \pkg{opm} almost like \ac{PM} data.

To work with user-defined \ac{PM} plates only requires registering these plates, i.e. storing a mapping from well coordinates to substrate names, and optionally also a full, descriptive name for the plate.

Besides these slight restrictions, which are illustrated with examples below, non-\ac{PM} data can be analysed with \pkg{opm} almost like \ac{PM} data.

\section{Preparation}\label{preparation}

<<label=chunk-setup, echo=FALSE>>=
options(width = 90)
options(prompt = "R> ")
options(continue = "   ")
options(useFancyQuotes = FALSE)
library("methods")
@

As usual, \pkg{opm} must be loaded before any analysis can begin:

<<label=load-library>>=
if ("package:opm" %in% search())
  detach("package:opm", unload = TRUE)
library("opm")
@

\section{Growth-curve data input}\label{data-input}

\subsection{User-entered data frames}\label{user-entered-input-data}

In the following we will use the growth-measurements data set from \citet{ijms140715141} as exemplar.
These data have been entered by hand and then input into \proglang{R} with one of the functions for reading \ac{CSV}, yielding a data frame, which comes with \pkg{opm}:

<<label=load-potatoes>>=
data("potato")
head(potato)
@

For details on this data set, enter \code{?potato} at the \proglang{R} prompt.
%TODO Lea: check and if necessary augment the manual entry for this data set.
% Do NOT REPEAT that stuff here -- here we must concentrate on the format and its manipulation, see next entry.
The measurements are in ``long'' format and must be reshaped using the eponymous function into ``wide'' format.
We do this separately for the dry-mass and fresh-mass measurements within the data set:

<<label=reshape-potatoes>>=
potato.fm <- reshape(potato, v.names = "FM", drop = "DM", direction = "wide",
  idvar = c("Genotype", "Treatment", "Replicate"), timevar = "Time")
potato.dm <- reshape(potato, v.names = "DM", drop = "FM", direction = "wide",
  idvar = c("Genotype", "Treatment", "Replicate"), timevar = "Time")
@

The data frame is reshaped from the ``long'' format with the repeated measurements in separate records into the ``wide'' format with repeated measurements in separate columns of the same record. 
This is necessary for the following conversion step.

The main function for converting user-defined data frames to \proglang{OPMX} or \proglang{MOPMX} objects is \code{opmx}, which can directly be applied to the objects created in the last step.
This works because the ``horizontal'' input format of \code{opmx} corresponds to the ``wide'' format of \code{reshape}.

<<label=potatoes-to-opmx>>=
potato.fm <- opmx(potato.fm, position = c("Genotype", "Replicate"),
  well = "Treatment", prefix = "FM.",
  full.name = c(fm = "Growth experiment, fresh mass"))
potato.dm <- opmx(potato.dm, position = c("Genotype", "Replicate"),
  well = "Treatment", prefix = "DM.",
  full.name = c(dm = "Growth experiment, dry mass"))
@

The data frame contains all substrate information (in the ``Treatment'' column).
Hence, \pkg{opm} registers the mapping from well coordinates to substrate names on the fly.
The plate type must be provided, however.
As it is not within the data frame, the short name of the plate type is taken from the \code{full.name} argument, whose main purpose is to enter the full, descriptive name of the plate type.
``Genotype'' and ``Replicate'' go to the metadata of the resulting object and together identify each plate.
In the case of \ac{PM} data, this is done using the position of the plate within the OmniLog\textregistered \ reader.
Thus the relevant argument here is \code{position}, which must be supplied unless there is a column of that name.
The \code{prefix} argument helps identifying the columns with measurements over time.

The registered plate type can be queried as follows:

<<label=show-potato-plate-type>>=
dim(potato.fm)
dim(potato.dm)
plate_type(TRUE) # shows all user-defined plates
listing(wells(plate = c("CUSTOM:FM", "CUSTOM:DM")))
@

Note the prefix ``CUSTOM:'', which is used to distinguish user-defined plate type from those that come with \pkg{opm}.
The object resulting from \code{listing} can be output with \code{to_yaml} or \code{saveRDS} for externally storing plate types in files.


\subsection{Direct registration of plate types}\label{register-plate-type}

\rcsmark{TODO.}
%TODO Lea: register the well map and the full name of the TECAN plate used below


\subsection{Input of TECAN data}\label{tecan-input}

%TODO Lea: explain the instrument where the file comes from. "TECAN" is the corporation, not the instrument...

Here we will use an exemplar that comes with \pkg{opm} as input data file:

<<label=input-tecan>>=
tecan.file <- opm_files("growth")
tecan.file <- grep("tecan", tecan.file, ignore.case = TRUE, value = TRUE)
tecan <- read.table(tecan.file)
head(tecan)
@

%TODO Lea: explain how one gets such a file

This format is not particularly useful within \proglang{R} but can be converted using the ``rectangular'' mode of \code{opmx}.

%TODO Lea: convert the data frame and explain what is going on


\rcsmark{TODO.}



\section{Visualisation of growth curves}\label{visualisation}

\rcsmark{TODO.}

<<label=plot-potato>>=
print(xy_plot(potato.fm, theor.max = FALSE, include = "Genotype",
  main = list(in.parens = FALSE), neg.ctrl = FALSE, ylab = "Mass [g]"))
print(xy_plot(potato.dm, theor.max = FALSE, include = "Genotype",
  main = list(in.parens = FALSE), neg.ctrl = FALSE, ylab = "Mass [g]"))
@

%TODO Lea: finish this and do the same for the TECAN data, make subsections where suitable
%TODO Lea: check whether plotting functions must be modified to accomodate these data


\section{Estimating parameters from growth curves}\label{estimation}


\rcsmark{TODO.}

%TODO Lea: check carefully which spline method is the best here, make subsections where suitable


\section{Statistical analysis of growth curves}\label{statistics}


\rcsmark{TODO.}

%TODO Lea: conduct selected analyses that make sense for these data, make subsections where suitable


\section{Acknowledgements}
We are grateful to Victoria Michael (\ac{DSMZ}) for providing growth curves measured with a TECAN instrument.

%\clearpage

\bibliography{opm}

\end{document}