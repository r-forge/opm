\documentclass[nojss]{jss}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% GENERAL HINTS: STYLE OF THIS DOCUMENT
%
% See the according section in the Rnw file for the main tutorial!!!
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Add Revision Control System (RCS) Markups
\usepackage{ulem}      % use this for sout
\usepackage{hyperref}
%\usepackage{fancyvrb}
\normalem              % set \emph to \textit again
% Additions (in blue)
\def\rcsadd#1{{\color{blue}#1}}
% Deletions (in red)
\def\rcsdel#1{{\color{red}\sout{#1}}}
% Yellow box (few words)
\def\rcsmark#1{\colorbox{yellow}{#1}}
%Yellow box (paragraph)
\def\rcscom#1{\noindent\newline\vspace*{0.5cm}\colorbox{yellow}{\parbox{\textwidth}{#1}}\vspace*{0.5cm}}


%% overwrite JSS definition of subsubsections
%% e.g., use numbering
\renewcommand{\jsssubsubsec}[2][default]{\vskip \preSskip%
  \pdfbookmark[3]{#1}{Subsubsection.\thesubsubsection.#1}%
  \refstepcounter{subsubsection}%
  {\large \thesubsubsection. #2} \nopagebreak
  \vskip \postSskip \nopagebreak}

%% overwrite JSS definitions of code sections
%% (make font smaller)
\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontshape=sl, fontsize=\small}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{Scode}{Verbatim}{fontshape=sl, fontsize=\small}

\DefineVerbatimEnvironment{Code}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{CodeInput}{Verbatim}{fontshape=sl, fontsize=\small}
\DefineVerbatimEnvironment{CodeOutput}{Verbatim}{fontsize=\small}



%% needed for CRAN checking
%\VignetteIndexEntry{Substrate information in opm}


% authors, first page
\author{Lea A.I. Vaas\\Leibniz Institute DSMZ \And
        Johannes Sikorski\\Leibniz Institute DSMZ  \And
        Markus G\"{o}ker\\Leibniz Institute DSMZ}


% title, first page
\title{Working with substrate information in \pkg{opm}}


% authors, header on every 2nd page
\Plainauthor{L.A.I. Vaas, J. Sikorski, M. G\"{o}ker}


% main title, first page
\Plaintitle{Working with substrate information in opm}


% short title, header on every 2nd page
\Shorttitle{Substrates in \pkg{opm} (\today)}


\Abstract{

%TODO
% Write suitable abstract, avoid ALL redundancies.
% This one is just a copy from the main tutorial -- why?

%The OmniLog\textregistered \ Phenotype Microarray system is able to monitor simultaneously, on a longitudinal time scale, the phenotypic reaction of single-celled organisms such as bacteria, fungi, and animal cell cultures to up to 2,000 environmental challenges spotted on sets of 96-well microtiter plates.
%The phenotypic reactions are recorded as respiration kinetics with a shape comparable to growth curves.
%Tools for storing the curve kinetics, aggregating the curve parameters, recording associated metadata of organisms and experimental settings as well as methods for analysing graphically and statistically these highly complex data sets are increasingly in demand.
%
%The \pkg{opm} \proglang{R} package facilitates management, visualization and statistical analysis of Phenotype Microarray data.
%Raw measurements can be easily input into \proglang{R}, combined with relevant meta-information and accordingly analysed.
%The kinetics can be aggregated by estimating curve parameters using several methods.
%Containers of \pkg{opm} data can easily be queried for and subset by using the integrated metadata and other information.
%Using \href{http://www.genome.jp/kegg/}{KEGG}, a database resource for understanding high-level functions and utilities of the biological system, \pkg{opm} offers functionality to map and render PM data on relevant pathway graphs in customized manner.
%All methods are exemplified using real-world data sets that are part of the \pkg{opm} \proglang{R} package or are included in the accompanying data package \pkg{opmdata}.

This is the substrate-information tutorial of \pkg{opm} in the version of \today{}.

}

\Keywords{Cell Lines, Metadata, Microbiology, Respiration Kinetics, Pathway, \proglang{KEGG}, \pkg{pathview}}

\Plainkeywords{cell Lines, metadata, microbiology, respiration kinetics, pathway, KEGG, pathview}

\Address{
  Markus G\"{o}ker\\
  Leibniz Institute DSMZ -- German Collection of Microorganisms and Cell Cultures\\
  Braunschweig\\
  \\
  Telephone: +49/531-2616-272\\
  Fax: +49/531-2616-237\\
  E-mail: \email{markus.goeker@dsmz.de}\\
  URL: \url{www.dsmz.de}\\
}


%% this must be included if Sweave is used (with % symbols):
%% need no \usepackage{Sweave.sty}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{document}
% NOTE: Rstudio might insert a line '\SweaveOpts{concordance=TRUE}' after '\begin{document}', which is removed again by the build script, as it causes warning messages during R CMD check.
% So please don't try to rescue that line, and don't rely on it being there.


%% so far adding a TOC proved unsuccessful -- apparently the JSS style doesn't allow for a TOC
%\tableofcontents
%\newpage


\section[Introduction]{Introduction}\label{introduction}

A detailed description of the OmniLog\textregistered \ Phenotype MicroArray (PM) system, its measuring procedure and data characteristics are found in the vignette ``\pkg{opm}: An R Package for Analysing OmniLog\textregistered \ Phenotype MicroArray Data'' (called ``main tutorial'' in the following).
The description of the methods below presupposes that the user is familiar with the usage of \pkg{opm} and has studied the main tutorial as well as the entries of the \pkg{opm} manual relevant to her or his research.
Especially the concept and structure of the different object-classes should be made clear before starting with this tutorial. 

In addition to visual inspection or statistical comparative analyses of Phenotype Microarray data, as described in the main manual, users might be interested in specific information on the substrates used in PM assays.
The \pkg{opm} package contains a large variety of additional data on PM substrates. Beside methods for assessing these information directly, this tutorial introduces strategies for visualization of the measured PM results by mapping on pathway-maps and introduces analysis methods for modelling and identification of informative and less informative substrates. 

\section[Preparation]{Preparation}\label{preparation}

<<label=chunk-setup, echo=FALSE>>=
options(width=90)
options(prompt = "R> ")
options(continue = "   ")
options(useFancyQuotes = FALSE)
library("methods")
@

Before starting, install the package \pkg{pathview} from \proglang{Bioconductor} (\url{http://bioconductor.org/packages/2.12/bioc/html/pathview.html}) and load it together with the \pkg{opm} package, into an \proglang{R} session. 
Please note, that it is important to load \pkg{pathview} before \pkg{opm}, since otherwise some functions are not visible and the package does not work properly. In this vignette this is catched by the \code{if}-construct.

<<label=load-library>>=
suppressPackageStartupMessages(library("pathview"))
if ("package:opm" %in% search())
  detach("package:opm")
library("opm")
data(vaas_et_al, package = "opmdata")
@
% not sure yet, if vaas_et_al is needed

\section[Available plate information]{Available plate information}\label{plateInfo}

Currently substrate layouts of various plates are available within \pkg{opm}.
An overview about the plate types available in the respective version of \pkg{opm} is obtained by entering

<<label=plate-types, results=hide>>=
plate_type(full = TRUE)
@

The resulting vector of names does not only include OmniLog\textregistered \ plates; see the manual and the main tutorial for further details.
Using other values for \code{full}, or additional arguments, distinct spelling variants of the plate names can be obtained.


\section[Accessing substrate information]{Accessing substrate information}\label{application substrates}

The \pkg{opm} package contains a number of functions suitable for accessing precomputed information on the substrates within certain wells and entire plates.
In the manual and help pages these functions are explained within the family ``naming-functions'' with according cross-references.
One usually would start a search by determining the exact spelling of an internally used name with \code{find\_substrate()}:

<<label=find-substrate-exact-substring, results=hide>>=
substrates <- find_substrate(c("Glutamine", "Glutamic acid"))
substrates
@

The results is a list (of the \proglang{S3} class ``substrate\_match'') containing character vectors with the results for each query name as values.
Surprisingly, nothing was found for ``Glutamic acid'' but several values for ``Glutamine''.
The default \code{search} argument is ``exact'', which is exact (case-sensitive) matching  of \textit{substrings} of the names.
One might want to use ``glob'' searching mode:

<<label=find-substrate-globbing-wrong, results=hide>>=
substrates <- find_substrate(c("L-Glutamine", "L-Glutamic acid"), "glob")
substrates
@

But with so-called wildcards, i.e. ``*'' for zero to many and ``?'' for a single arbitrary character the search is more flexible:

<<label=find-substrate-globbing-useful, results=hide>>=
substrates <- find_substrate(c("*L-Glutamine", "*L-Glutamic acid"), "glob")
substrates
@

This fetches all terms that end in either query character string, and does so case-insensitively.
Advanced users can apply the much more powerful ``regex'' and ``approx'' search modes; see the manual for details, entry \code{?find\_substrate}.

Note that \pkg{opm} appends a concentration (or just repetition) indicator as a number after a hash sign (``\#'') to the substrate names wherever necessary.
Thus a wildcard at the end of a name might often by the most useful search pattern.

Once the internally used names (which are not guaranteed to be stable between distinct \pkg{opm} releases) have been found, information on the substrates can be queried such as their occurrences and positions on plates:

<<label=find-positions, results=hide>>=
positions <- find_positions(substrates)
positions
@

This yields a nested list containing two-column matrices with plate names in the first and well coordinates in the second column.
References to external data resources for each substrate name can be obtained using \code{substrate\_info()}:

<<label=substrate-info, results=hide>>=
subst.info <- substrate_info(substrates)
subst.info
@

By default this yields CAS numbers (\url{http://www.cas.org/content/chemical-substances/faqs}), but MeSH names (useful for conducting PubMed queries; see \url{http://www.ncbi.nlm.nih.gov/mesh/}) \citep{Coletti01072001}, ChEBI IDs \citep{Hastings01012013}, KEGG compound IDs, KEGG drug IDs \citep{Kanehisa01012010} and MetaCyc IDs \citep{Caspi01012012} IDs have also been collected for the majority of the substrates.
Using the ``browse'' argument, full URLs can be created and optionally also directly opened in the default web browser.
Using the ``download'' argument, if KEGG drug or compound IDs have been selected, these can be downloaded from the KEGG server if the \pkg{KEGGREST} is available and converted into customized objects.
It is possible to nicely display all available information at once:

<<label=substrate-all-info, results=hide>>=
subst.info <- substrate_info(substrates, "all")
subst.info
@

Another use of \code{substrate\_info()} is to convert substrate names to lower case but protecting name components such as abbreviations or chemical symbols.
See the manual for further details, help page \code{?substrate\_info}.


\section[Visualisation by integration in pathway maps]{Visualisation by integration in pathway maps}\label{vis-pathway}

In conjunction with other packages, it is possible to visualize PM results directly in pre-existing pathway maps as, for example, from the KEGG database.
Those maps are essentially manually drawn pathway maps representing the currently available knowledge about genes, substrates and their connection in pathways. 
Depending on availability of genome and gene-annotation information within KEGG about a certain organism, individual maps are allocateable \citep{Kanehisa01012010}.

The mapping itself is simply the introduction of PM-measurement data as colour-coding of nodes (here, representing the substrates) into those maps, as it can be done similarly with several other types of OMICS-data. For details, please see the description on the KEGG-homepage: (\url{http://www.genome.jp/kegg/}).

Here we will use the function \code{pathview} from the package of same name \citep{Luo2013}. 
This function downloads the user-defined pathway map and subsequently maps and renders the given PM-data into it. 
Please note, that it has to be loaded \emph{before} loading package \pkg{opm} into an \proglang{R} session.

\subsection[Providing suitable input-data]{suitable input-data}\label{annotated-input}

The workflow starts with either an \code{OPMX} object containing the agregated values, or the result from an \proglang{opm\_mcp} analysis. 
The first step in both cases is to bring the PM-results in a suitable format, which is a named vector created by \code{annotated}.

<<label=annotated>>=
# here provide the annotated vector from vaas_1
xx <- annotated(vaas_1)
head(xx)
@

The resulting vector basically contains the numeric values (selected parameter estimates or \code{opm\_mcp} results, as explained below) as well as an annotation of the according substrates. 
With the \code{what}-argument, passed as eponymous argument to \code{substrate\_info}, the user can indicate which kind of information should be used for the annotation.
\code{annotated} works directly on \code{OPMX}-objects containing aggregated data for single plates or bundles of plates. 
However, please note, that the output allows for only one value per substrate. 
When applying \code{annotated} to a set of plates, make sure, that only one experimental group is comprised, since the resulting values are averages per well over all plates.
Using the \code{output}-argument, one is able to choose which parameter should be adressed, for example AUC instead of maximum height:

<<label=annotated-param>>=
y <- annotated(vaas_1, output = param_names()[4])
head(y)
@

Further options allow for indication of categorical (\code{different}) and for the \code{opm\_glht} method, binary outcomes (\code{smaller}, \code{larger} or \code{equal}).

But visualization of the results of an \proglang{opm\_mcp} analysis is also possible, which offers more (statistically interesting) opportunities for making sense of the PM data in the context of pathways.
The results from an \code{opm\_mcp} procedure are treated with \code{annotated} as shown before with an \code{OPMX} object:

<<label=annotated-opm_glht-plot>>=
x <- opm_mcp(vaas_4[, , 1:15], output = "mcp", model = ~ Well,
  linfct = c(`Dunnett.A05` = 1), full = FALSE)
@

However, this method only makes sense, if each coefficient estimated by \code{opm\_mcp} can be linked to a single substrate. This is usually only possible for the ``Dunnett'' and ``Pairs'' type of contrast if applied to the wells. 


\begin{center}
\begin{figure}
\scalebox{1}{
<<label=annotated-opm-glht-figure, fig=TRUE, echo=FALSE, width=8>>=
old.mar <- par(mar = c(3, 8, 3, 2)) # adapt plotting settings
plot(x)
par(old.mar) # reset plotting settings
@
}
\caption{
\label{fig:opm_mcp_CI_plotII}
Point estimates and 95\% confidence intervals in a manually defined comparison of group means for a specifically selected set of wells (A01 to B03) from the \code{vaas\_4} exemplar object. 
In this procedure each well is compared against A05. 
The picture was obtained by running \code{opm\_mcp()} and then the plotting function for the resulting \code{opm\_glht}-object. See the main tutorial for details.
}
\end{figure}
\end{center}


With this example, the options allowing for categorical output of \code{annotated} will be illustrated.
Obviously, only three comparisons exhibit a statistically significant difference, namely the comparisons A10 - A05, A11 - A05 and A12 - A05, all in the way that A05 is smaller than A10, A11 and A12, respectively.

Using the \code{output}-argument users are able to get various categorical results beside simple numerical output of the respective point estimator.
The options \code{upwards} and \code{downwards} result classifications in three categories (FALSE, NA, or TRUE), giving an indication, if the CI is located in the positive or negative range with resulting NA, if zero is included and thus no decission possible.
The options \code{different}, \code{smaller}, \code{larger} and \code{equal} work similarly, but use only the two categories TRUE and FALSE.


<<label=annotated-opm_glht-options, results=hide>>=
anno.nu <- annotated(x, output = "numeric")
anno.up <- annotated(x, output = "upwards")
anno.do <- annotated(x, output = "downwards")
anno.di <- annotated(x, output = "different")
anno.eq <- annotated(x, output = "equal")
anno.sm <- annotated(x, output = "smaller")
anno.la <- annotated(x, output = "larger")
@

A comprehensive overview of the results with the above stated example is facilitated by bundling the results of all possible options into one dataframe:

<<label=annotated-opm_glht-options-tab, result=hide>>=
annotab <- data.frame(Comparison = rownames(confint(x)$confint), 
  numeric = anno.nu, upwards = anno.up, downward = anno.do, 
  different = anno.di, equal = anno.eq, smaller = anno.sm, larger = anno.la)
annotab
@

Using the argument \code{how = "value"} a numeric matrix containing the chosen computed values together with their abundance in pathway maps can be investigated. 


\subsection[Visualisation in pathway-maps using pathview]{Visualisation in pathway-maps using pathview}\label{pathview}

Basically, \code{pathview} maps and renders pathway graphs (from KEGG) and integrates additional data provided from other sources, mainly experimental data from various OMICS-approaches. 
Here the functions serves to integrate and visualize PM data provided by \code{annotated}.
The user has to specify the pathway, provide the PM-data and all necessary steps (download of pathway graph data, parsing of data file, maping user's data to the pathway, and rendering of pathway graph with the mapped data) are executed automatically by \code{pathview}.

Generally, a pathway map is described as ``[...]a molecular interaction/reaction network diagram represented in terms of the KEGG Orthology (KO) groups [...]''(see \url{http://www.genome.jp/kegg/kegg3a.html} for further details).
KEGG contains a collection of different types of pathway maps, precisely identifiable by the combination of 2-4 letter code and 5 digit number. 

The letter prefixes have the following meanings:

\begin{itemize}
\item[map -] Reference pathway
\item[ko -] Reference pathway (KO)
\item[ec -] Reference pathway (EC)
\item[rn -] Reference pathway (Reaction)
\item[org -] Organism-specific pathway map
\end{itemize}

Only the first reference pathway map is manually drawn; all other maps are computationally generated. 
\code{pathview} allows only for usage of KEGG orthology (the \emph{ko}-maps) or species specific letter code (see \url{http://www.genome.jp/kegg/catalog/org_list.html} for an up-to-date list of organisms with complete genome information in KEGG).
The \emph{ko}-maps contain the manually defined ortholog groups (\emph{ko} entries) for all proteins and functional RNAs that correspond to KEGG pathway nodes, BRITE hierarchy nodes, and KEGG module nodes, whereas the species specific maps contain 

Before you start with this section, please make sure, that you have installed the \pkg{pathview} package including all its dependencies from \proglang{Bioconductor} (\url{http://bioconductor.org/packages/2.12/bioc/html/pathview.html}).

%TODO 
%explain the wrapper
To provide more convenient functionality for mapping PM-data on KEGG-pathway maps, we wrote a wrapper for the \code{pathview}-function. 
This wrapper provides mainly fine tuned settings for the convenient application of \code{pathview} on PM-data.
All graphics below are produced using this wrapper, however, the user is free to use the original \code{pathview}-function with the respectively changed arguments. 


<<label=pathview-wrapper>>=
opm_path <- function(cpd.data, high = list(gene = "green4", cpd = "magenta4"), 
  low = list(gene = "white", cpd = "white"),
  mid = list(gene = "lightsteelblue1", cpd = "lightsteelblue1"),
  pathway.id = "00052", species = "ko",  out.suffix = "non-native", 
  kegg.native = F, key.pos = "bottomright", afactor = 1000,
  limit = list(gene = 2, cpd = 400), bins = list(gene = 0.5, cpd = 20),
  both.dirs = list(gene = FALSE, cpd = FALSE), cex = 0.7, 
  sign.pos = "bottomleft", cpd.lab.offset = 0, same.layer = F, rank.dir = "TB",
  pdf.size = c(14,10), gene.data = NULL, ...) {
  
  pathview(gene.data = gene.data, cpd.data = cpd.data, na.col ="grey",
           low = low,
           mid = mid,
           high = high,
           pathway.id = pathway.id, 
           species = species, 
           out.suffix = out.suffix,
           kegg.native = kegg.native,
           key.pos = key.pos,
           afactor = afactor,
           limit = limit,
           bins = bins,
           both.dirs = both.dirs,
           cex = cex, sign.pos = sign.pos, cpd.lab.offset = cpd.lab.offset,
           same.layer = same.layer,
           pdf.size = pdf.size,
           rank.dir = rank.dir,
           ...)
}
@


<<label=pathview-wrapper-plot-native>>=
xx <- annotated(vaas_1)
test.png <- opm_path(cpd.data = xx, kegg.native = T, cex = 0.25, 
  out.suffix = "native")
str(test.png)
@
%TODO
% explain the content of test.png


\begin{figure}
\scalebox{1.225}{
\includegraphics[type=png,ext=.png,read=.png,page=1]{ko00052.native}
}
\caption{\label{fig:pathview}
Map of KEGG onthology galactose metabolisms in the native KEGG representation.  
}
\end{figure}

Here the same in non-native KEGG representation.

<<label=pathview-wrapper-plot>>=
xx <- annotated(vaas_1)
test.pdf <- opm_path(cpd.data = xx)
str(test.pdf)
@


\begin{figure}
\scalebox{1.225}{
\includegraphics[type=pdf,ext=.pdf,read=.pdf,page=1]{ko00052.non-native}
}
\caption{\label{fig:pathview}
Map of galactose metabolisms in the non-native KEGG representation available in xxx.  
}
\end{figure}

% here in kegg-native with species specific map from human
<<label=pathview-kegg-native>>=
test.map.pdf <- opm_path(cpd.data = xx, species = "hsa", out.suffix = "hsa", 
  cex = 0.25, kegg.native = T)
@
  
\begin{figure}
\scalebox{1.225}{
\includegraphics[type=png,ext=.png,read=.png,page=1]{hsa00052.hsa}
}
\caption{\label{fig:pathview-keggnative}
Map of galactose metabolisms for humans in native KEGG representation.  
}
\end{figure}


%
%%TODO
%% update the discussion
%% avoid ALL unnecessary text


\section[Model-building approach using random forest]{Model-building approach using random forest}\label{random-forest}
Using the argument \code{how= "value"} a numeric matrix containing the chosen computed values together with their abundance in pathway maps can be investigated. 
In analogy to the download argument of \code{substrate\_info} the information are convertet into a numeric matrix. Please note, that this option is not available for all values of \code{what} and requires additional libraries. 
See \code{substrate\_info} for details.

<<label=annotated-opm_glht-mat-dig, echo=FALSE, result=hide>>=
old.op <- options()
options(digits = 2)
@

<<label=annotated-opm_glht-mat>>=
anno.glht.mat <- annotated(x, how = "values")
anno.glht.mat
@

The obtained information about the pathway certain substrates are involved in can be used to determine manually which pathways are actually of interest or can serve as input for model-building procedures as, for example, random forest approaches, which is demonstrated below.


\section[Acknowledgements]{Acknowledgements}
The integration of missing OmniLog\textregistered \ substrates into ChEBI by the ChEBI staff is gratefully acknowledged.


\bibliography{opm}

\end{document}

